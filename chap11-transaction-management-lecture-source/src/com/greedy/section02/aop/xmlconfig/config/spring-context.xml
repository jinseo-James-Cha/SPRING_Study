<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- context 스키마 추가해야한다. -->
	<context:property-placeholder location="connection-info.properties"/>
	
	<!-- 빈 스캐닝 basePackage 설정 -->
	<context:component-scan base-package="com.greedy.section02.aop.xmlconfig"/>
	
	<!-- baseDataSource 빈 등록  -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${oracle.dev.driver}"/>
		<property name="url" value="${oracle.dev.url}"/>
		<property name="username" value="${oracle.dev.username}"/>
		<property name="password" value="${oracle.dev.password}"/>
		<property name="defaultAutoCommit" value="false"/>
	</bean>
	
	<!-- sqlSessionFactoryBean 빈 등록 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="com/greedy/section02/aop/xmlconfig/config/mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- sqlSessionTemplate 빈 등록 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"/>
	</bean>
	
	<!-- 매퍼 스캔 등록 -->
	<mybatis-spring:scan base-package="com.greedy.section02.aop.xmlconfig.model.dao"/>
	
	<!-- 트랜잭션 매니저 등록 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- AOP 트랜잭션 설정 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!-- 트랜잭션 관련 처리 메소드들을 advice로 등록한다. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
	    <tx:attributes>
	        
			<tx:method name="select*" read-only="true" rollback-for="Exception"/>
			<tx:method name="regist*" propagation="REQUIRED" isolation="SERIALIZABLE" rollback-for="Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" isolation="SERIALIZABLE" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="SERIALIZABLE" rollback-for="Exception"/>
	    </tx:attributes>
	</tx:advice>
	
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.greedy.section02.aop.xmlconfig.model.service..*(..))" id="serviceMethod"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
	</aop:config>
	
	<!-- 
		DAO에서 exception이 발생하는 경우는 정상적으로 트랜잭션이 처리가 되지만
		service에서 checkedException이 발생하는 경우에는 정상 트랜잭션 처리가 안된다.
		RuntimeException의 하위 타입의 예외 발생시에 rollback처리를 하게된다.
		
		@Repository 기능은 DB관련 Exception을 런타임 계열의 Exception으로 변환한 뒤 던져주는 역할을 하기 때문에
		자동 RuntimeException으로 취급하여 롤백을 하는 기본 설정에 적용되어 롤백처리가 된다.
		
		서비스쪽에서 사용자 정의 checkedException 처리는
		rollback-for를 이용해 롤백하게될 예외 클래스의 명칭을 작성해주면
		작성한 예외클래스의 하위 Exception이 발생하는 경우 롤백하겠다는 설정을 한것이다.
	 -->
</beans>
